import math
from PySide import QtCore, QtGui
from math import sin, cos, radians
from PySide.QtGui import QInputDialog
from FreeCAD import Vector
import random, Draft, threading
import Draft
doc = App.ActiveDocument# Create a new document
import Part, Spreadsheet
sheet = doc.getObject("Spreadsheet")
gui=Gui.ActiveDocument
#create array of pallet cavity positions
pitchCol=sheet.PalletPitchLg
pitchRow=20 # diff from current pallet
import Draft
arrPalletLow=[]
arrPalletT=[]
xLow=50
yLow=0
zLow=0
xTop=50
yTop=408
zTop=0
#create position of cavity in top & lower pallet
for i in range(6):	
  for j in range(8):
    #print('i='+str(i)+',j='+str(j)+', i*8+j+1='+str(i*8+j+1))
    arrLow=[]
    arrTop=[]
    count=i*8+j
    #for lower pallet
    arrLow.append('Pos'+str(count+1))
    arrLow.append(pitchCol*i+xLow)
    arrLow.append(pitchRow*j+yLow)
    arrLow.append(0+zLow)
    arrLow.append(False) #indicate empty
    arrPalletLow.append(arrLow)
    #for top pallet
    arrTop.append('TinePallet'+str(count+1))
    arrTop.append(pitchCol*i+xTop)
    arrTop.append(pitchRow*j+yTop)
    arrTop.append(0+zTop)
    arrTop.append(True) #indicate full
    arrPalletT.append(arrTop)
    #App.Console.PrintMessage('Pallet Top'+str(count+1)+'; X='+str(pitchCol*j+xTop)+'; Y='+str(yTop-pitchRow*i)+'\n')  
#--end of pallet cavity array

#Set variable to create tine. #get data from speaadsheet
a=sheet.LinerPitchLg
b=sheet.LinerPitchRow
c=sheet.LinerPitchCol
tinesLeftArr=[]
tinesRightArr=[]
def createTines(x,y,z,groupName):
  if ('left' in groupName.lower()):
    tinesLeftArr.clear()
    tinesArr=tinesLeftArr
    suffix='L'
  else:
    tinesRightArr.clear()
    tinesArr=tinesRightArr
    suffix='R'
  for j in range(1, -2, -1):	
    for i in range(10):	    
      arr=[]
      arr.append('Tine'+suffix+str(len(tinesArr)+1))
      arr.append(j*c+x)
      arr.append(abs(j)*b+a*i+y)
      arr.append(z)
      if random.random()>0.92:
        arr.append(False)
      else:
        arr.append(True)
      tinesArr.append(arr)

  # get object (Cylinder) to be cloned
  tine = doc.getObject("Cylinder")
  # Create a part to hold the cloned objects
  tinesLeft=doc.addObject("App::Part", groupName)
  #group = doc.addObject("App::DocumentObjectGroup", groupName)
  import Draft
  # Clone the original object and assign names to the clones
  clone_count = 30
  for i in range(1, clone_count + 1):
    clone=Draft.clone(doc.getObject("Cylinder"))
    clone.Label = "Tine"+suffix+ str(i)
    tinesLeft.addObject(clone)
    clone.Placement.Base=App.Vector(tinesArr[i-1][1],tinesArr[i-1][2],tinesArr[i-1][3])
    if not tinesArr[i-1][4]:
      clone.ViewObject.Visibility = False
  doc.recompute(None,True,True)

#end of creating tines function


def deleteTines():
  doc = App.ActiveDocument
  doc.getObject('TinesLeft').removeObjectsFromDocument()
  doc.removeObject('TinesLeft')
  doc.getObject('TinesRight').removeObjectsFromDocument()
  doc.removeObject('TinesRight')

def getUserInput():
  global repeat
  global speed
  repeat =  QtGui.QInputDialog.getInt(None,"Enter number","Cycle to repeat")[0]
  speed =  QtGui.QInputDialog.getInt(None,"Enter speed 5 to 100","Smaller is faster")[0]

sixUpPnp=doc.getObject('SixUpPnP')
gripperLt=doc.getObject('MyParts004')
gripperRt=doc.getObject('Clone158')
  # function to restore initial position of the objects
def reset():
  gripperLt.Placement.Base=Vector(0,0,0)
  sixUpPnp.Placement.Base=Vector (16.4, 573.6, 0.0)
  gripperRt.Placement.Base=Vector(270,0,12)


reset()

def makeTinesVisible():
  tineG=doc.getObject('TinesR1')
  tineG.ViewObject.Visibility = True
  tineG=doc.getObject('TinesR2')
  tineG.ViewObject.Visibility = True
  tineG=doc.getObject('TinesR3')
  tineG.ViewObject.Visibility = True
  tineG=doc.getObject('TinesR4')
  tineG.ViewObject.Visibility = True
  tineG=doc.getObject('TinesR5')
  tineG.ViewObject.Visibility = True
  tineG=doc.getObject('TinesR6')
  tineG.ViewObject.Visibility = True
  tineG=doc.getObject('TinesR7')
  tineG.ViewObject.Visibility = True
  tineG=doc.getObject('TinesR8')
  tineG.ViewObject.Visibility = True

timerTineL = QtCore.QTimer()
#Get the AutoLam PnP & place it at home position

import time #required for sleep function
def pnpTines():
  global sixUpMove
  global accuStep
  global tTrackL
  global pTrackL
  global speed
  global repeat
  tTrackL = 0 #tracker for tine left
  pTrackL= 0  #tracker for pallet left
  global movementR
  global tTrackR
  global pTrackR
  tTrackR = 0 #tracker for tine right
  pTrackR=24  #tracker for pallet right
  accuStep=0
  #reset tines visible in pallet
  makeTinesVisible()
  for t in range(30):  #need to update pTrack & tTrack in the loop
    if repeat == 'stop':
      reset()
      break
    if pTrackL<24 or pTrackR<48:
      for _ in range(5): #loop to get the next first visible tine for left
        if not tinesLeftArr[tTrackL][4] and tTrackR<30: tTrackL+=1
        else: break
      #calculate movement for left tine
      currTineL=doc.getObject('TinesLeft').Group.__getitem__(tTrackL)
      initTineBaseL =currTineL.Placement.Base
      gripperLt.Placement.Base=initTineBaseL
      currPCavityV= Vector(arrPalletLow[pTrackL][1],arrPalletLow[pTrackL][2],arrPalletLow[pTrackL][3])
      uDirL = (currPCavityV-initTineBaseL).normalize()
      distL = (currPCavityV - initTineBaseL).Length/50
      App.Console.PrintMessage('Dist Travel '+arrPalletLow[pTrackL][0]+'='+str(f'{distL*50*2: .2f}' ))
      movementL = uDirL*distL #amount to move in each step in direction of uDir
      for _ in range(5):#loop to get the next first visible tine for right
        if not tinesRightArr[tTrackR][4] and tTrackR<60: tTrackR+=1
        else: break
      #calculate movement for right tine
      currTineR=doc.getObject('TinesRight').Group.__getitem__(tTrackR)
      initTineBaseR =currTineR.Placement.Base
      currPRCavityV= Vector(arrPalletLow[pTrackR][1],arrPalletLow[pTrackR][2],arrPalletLow[pTrackR][3])
      #Note: Direction is reverse
      uDirR = (currPRCavityV-initTineBaseR).normalize()
      distR = (currPRCavityV-initTineBaseR).Length/50
      App.Console.PrintMessage('Dist Travel '+arrPalletLow[pTrackR][0]+'='+str(f'{distR*50*2: .2f}' )+'\n')
      movementR = uDirR*distR #amount to move in each step in direction of uDir
      #set movement for 6 Up Gripper
      if pTrackL == 0: 
        tineG=doc.getObject('TinesR1')
        tineG.ViewObject.Visibility = False
      if pTrackL == 3: 
        tineG=doc.getObject('TinesR2')
        tineG.ViewObject.Visibility = False
        sixUpPnp.Placement.Base=Vector (16.4, 553.6, 0.0)
      if pTrackL == 6: 
        tineG=doc.getObject('TinesR3')
        tineG.ViewObject.Visibility = False
        sixUpPnp.Placement.Base=Vector (16.4, 533.6, 0.0)
      if pTrackL == 9: 
        tineG=doc.getObject('TinesR4')
        tineG.ViewObject.Visibility = False
        sixUpPnp.Placement.Base=Vector (16.4, 513.6,0.0)
      if pTrackL == 12: 
        tineG=doc.getObject('TinesR5')
        tineG.ViewObject.Visibility = False
        sixUpPnp.Placement.Base=Vector (16.4, 493.6, 0.0)
      if pTrackL == 15: 
        tineG=doc.getObject('TinesR6')
        tineG.ViewObject.Visibility = False
        sixUpPnp.Placement.Base=Vector (16.4, 473.6, 0.0)
      if pTrackL == 18: 
        tineG=doc.getObject('TinesR7')
        tineG.ViewObject.Visibility = False
        sixUpPnp.Placement.Base=Vector (16.4, 453.6, 0.0)
      if pTrackL == 21: 
        tineG=doc.getObject('TinesR8')
        tineG.ViewObject.Visibility = False
        sixUpPnp.Placement.Base=Vector (16.4, 433.6, 0.0)     
      Gui.updateGui()
      for _ in range(speed*5000000):
        pass
      for step in range(100):
        if accuStep >=0 and accuStep <150: sixUpMove=(160/150)
        if accuStep >=150 and accuStep <300: sixUpMove=-(180/150)
        if accuStep >=300 and accuStep <450: sixUpMove=(180/150)
        if accuStep >=450 and accuStep <600: sixUpMove=-(200/150)
        if accuStep >=600 and accuStep <750: sixUpMove=(200/150)
        if accuStep >=750 and accuStep <900: sixUpMove=-(220/150)
        if accuStep >=900 and accuStep <1050: sixUpMove=(220/150)
        if accuStep >=1050 and accuStep <1200: sixUpMove=-(240/150)
        if accuStep >=1200 and accuStep <1350: sixUpMove=(240/150)
        if accuStep >=1350 and accuStep <1500: sixUpMove=-(260/150)
        if accuStep >=1500 and accuStep <1650: sixUpMove=(260/150)
        if accuStep >=1650 and accuStep <1800: sixUpMove=-(280/150)
        if accuStep >=1800 and accuStep <1950: sixUpMove=(280/150)
        if accuStep >=1950 and accuStep <2100: sixUpMove=-(300/150)
        if accuStep >=2100 and accuStep <2250: sixUpMove=(300/150)
        if accuStep >=2250 and accuStep <2400: sixUpMove=-(160/150)        
        sixUpPnp.Placement.Base.y+=sixUpMove
        if pTrackL<24:
          if step<50: 
            newGripPosL = currTineL.Placement.Base + movementL
            gripperLt.Placement.Base=newGripPosL
            currTineL.Placement.Base =newGripPosL
          if step>49:    # do not move tines as it is plcaed into pallet
            if step==50:
              for _ in range(speed*5000000):
                pass
            gripperLt.Placement.Base -= movementL
          #if pTrackL==1:
            #App.Console.PrintMessage('Step'+str(step)+ '; Movement='+str(moveL )+'\n')
        if pTrackR<48:
          if step<50: 
            newGripPosR = currTineR.Placement.Base + movementR
            currTineR.Placement.Base += movementR
            gripperRt.Placement.Base = newGripPosR
          if step>49:    # do not move tines as it is plcaed into pallet
            gripperRt.Placement.Base -= movementR
        accuStep+=1
        Gui.updateGui()
       # eTimer = QtCore.QElapsedTimer()

    tTrackL+=1
    pTrackL+=1
    tTrackR+=1
    pTrackR+=1


def createTinesLScroll():
  createTines(0,0,12,'TinesLeft')
  partsL=doc.getObject('TinesLeft')
  partsL.Placement.Base.y=200
  for _ in range(100):
    partsL.Placement.Base.y-=2 #scroll step by step 200/100
    Gui.updateGui() # DeletTines('TinesLeft')

def createTinesRScroll():
  createTines(270,0,12,'TinesRight')
  partsR=doc.getObject('TinesRight')
  partsR.Placement.Base.y=200
  for _ in range(100):
    partsR.Placement.Base.y-=2 #scroll step by step 200/100
    Gui.updateGui() # deletTines('TinesRight')


def runCyc():
  global speed
  global repeat
  getUserInput()
  for _ in range(repeat):
    if repeat == 'stop':
      reset()
      break
    createTinesLScroll()
    createTinesRScroll()
    pnpTines()
    #doc.getObject('MyParts004').Placement.Base=FreeCAD.Vector(0,0,0)
    reset()
    Gui.updateGui() 
    # Wait for while in seconds
    time.sleep(3)
    deleteTines()
  

runCyc()

#function to place tines into upper pallet. Use once only
def placeTinesInUpperPallet():
  global arrTinesUpperPallet
  pitchCol=33.78
  pitchRow=20
  arrTinesUpperPallet=[]
  x=50
  y=573.6
  z=0

  for i in range(8):	
    for j in range(6):
      App.Console.PrintMessage('i='+str(i)+',j='+str(j)+', i*8+j+1='+str(i*8+j+1))
      arr=[]
      count=i*6+j
      arr.append('TinePallet'+str(count+1))
      arr.append(pitchCol*j+x)
      arr.append(y-pitchRow*i)
      arr.append(0+z)
      arr.append(True) #indicate full
      arrTinesUpperPallet.append(arr)
      App.Console.PrintMessage('TinePallet'+str(count+1)+'; X='+str(pitchCol*j+x)+'; Y='+str(y-pitchRow*i)+'\n')
      tineP=doc.getObjectsByLabel(arr[0])[0]
      tineP.Placement.Base=FreeCAD.Vector(arr[1],arr[2],arr[3])

    """
    if pTrackR<48:
      if tinesRightArr[tTrackR][4]:
        currTineR=doc.getObject('TinesRight').Group.__getitem__(tTrackR)
        initTineBaseR =currTineR.Placement.Base
        currPRCavityV= Vector(arrPallet[pTrackR][1],arrPallet[pTrackR][2],arrPallet[pTrackR][3])
        #Note: Direction is reverse
        uDirR = (currPRCavityV-initTineBaseR).normalize()
        distR = (currPRCavityV-initTineBaseR).Length/100
        movementR = uDirR*distR #amount to move in each step in direction of uDir
        App.Console.PrintMessage("TineRBase: " + str(currTineR.Placement.Base)+"; PalletBase: "+str(currPRCavityV)+ "\n")
        for _ in range(100):
          newPosR = currTineR.Placement.Base + movementR
          # Move placementt along the direction
          currTineR.Placement.Base=newPosR
          Gui.updateGui()
        tTrackR+=1
        pTrackR+=1
        App.Console.PrintMessage("Move : " + str(movementR)+"CurrTine NameR: " +currTineR.Name+ "\n")
      else:
        tTrackR+=1
    else:
      if (pTrackL>23 and pTrackR>47):  
        break
    """

def pnpTinesR():
  global movementR
  global tTrackR
  global pTrackR
  tTrackR = 0 #tracker for tine right
  pTrackR=24  #tracker for pallet right
  #get tines& pallet  vector
  for _ in range(30):  #need to update pTrack & tTrack in the loop
    if pTrackR<48:
      if tinesRightArr[tTrackR][4]:
        currTineR=doc.getObject('TinesRight').Group.__getitem__(tTrackR)
        initTineBaseR =currTineR.Placement.Base
        currPRCavityV= Vector(arrPallet[pTrackR][1],arrPallet[pTrackR][2],arrPallet[pTrackR][3])
        #Note: Direction is reverse
        uDirR = (currPRCavityV-initTineBaseR).normalize()
        distR = (currPRCavityV-initTineBaseR).Length/100
        movementR = uDirR*distR #amount to move in each step in direction of uDir
        App.Console.PrintMessage("TineRBase: " + str(currTineR.Placement.Base)+"; PalletBase: "+str(currPRCavityV)+ "\n")
        for _ in range(100):
          newPosR = currTineR.Placement.Base + movementR
          # Move placementt along the direction
          currTineR.Placement.Base=newPosR
          Gui.updateGui()
        tTrackR+=1
        pTrackR+=1
        App.Console.PrintMessage("Move : " + str(movementR)+"CurrTine NameR: " +currTineR.Name+ "\n")
       # connect timer event to function "nudge"   f'{value: .2f}'
        #timerTineL.timeout.connect(nudge(newObj))
        #timerTineL.start(100)
      else:
        tTrackR+=1
    else:
      break

tineCycL=0
def nudge(tineL):
  global movement
  global tineCycL
  if tineCycL>10:
    timerTineL.stop()
    tineCycL=1   
  else:
    newPos = tineL.Placement.Base + movement
    # Move placementt along the direction
    tineL.Placement.Base=newPos
    tineCycL+=1
    Gui.updateGui()
    App.Console.PrintMessage("TineCyc : " + str(tineCycL) + "\n")

eTimer = QtCore.QElapsedTimer()
eTimer.start()
now=eTimer.elasped()
def scroll1Step():
  parts=doc.getObject('TinesLeft')
  parts.Placement.Base.y=200
  if parts.Placement.Base.y < 1:
    timer1.stop()
  else:
    parts.Placement.Base.y-=5 #scroll step by step
    Gui.updateGui()
  App.Console.PrintMessage("Cyc : " + str(cyc) + "\n")


        App.Console.PrintMessage("Move : " + str(movement)+"; tTrack: "+str(tTrackL) +"; pTrack: "+str(pTrackL)+ "\n")
        App.Console.PrintMessage("CurrTine Name : " +currTineL.Name+ "\n")
        
def stopTimers():
  timer1.Stop()
  deleteTines('TinesLeft')
  timer2.Stop()
  deleteTines('TinesRight')

createTinesLScroll()
createTinesRScroll()
# Create a timer for moving object 1
timer1 = QtCore.QTimer()
timer1.timeout.connect(pnpTinesL)
# Create a timer for moving object 2
timer2 = QtCore.QTimer()
timer2.timeout.connect(pnpTinesR)

timer1.start(50)
timer2.start(50)
QtCore.QTimer.singleShot(60000, stopTimers)


#QtCore.QTimer.singleShot(50, createTinesLScroll)
#QtCore.QTimer.singleShot(50, createTinesRScroll)
#deleteTines('TinesLeft')
